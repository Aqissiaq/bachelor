@article{Lund2019,
abstract = {AbstractIn traditional software engineering methodologies, software correctness isestablished through testing and progressive fault mitigation. Safety propertiesare established by demonstrating that a sufficiently large number of test casesfail to violate them.In contrast,formal verification methodspermit a systems design process wheredesired safety properties are stated outright in the system specification, andenforced by automated analysis tools. This is of particular interest in designingdistributed systems, where safety properties may be easy to formally defineand specify, yet hard to implement in practice.Despite this promise, the use of formal methods has largely been confinedto academia and certain classes of safety-critical systems. Recently, however,companies like Amazon and Microsoft have adopted formal verification toolsto verify distributed system designs.In this thesis, we present a formal specification of the Chord distributed hashtable protocol, using the TLA+specification language. We specify the protocolat a coarse level with a relaxed failure model, and then increase the granularityand introduce fail-stop failures, yielding a formal specification of Chord withasynchronous messaging and fault-tolerance mechanisms.We first model-check the specification under the constraint that no failuresoccur, and show that it satisfies critical safety properties. We then show that theintroduction of failures leads the specification to admit several behaviors whichbreak the safety properties Chord promises, potentially leading to permanentpartitions in the network and performance degradation.As part of this work, we provide an overview of formal verification methods; wediscuss certain formalisms and logics involved in modelling and proving algo-rithms, show potential advantages of applying formal methods to distributedsystems design, and identify barriers keeping formal methods from widespreaduse.},
author = {Lund, J{\o}rgen Aarmo},
file = {:home/aqissiaq/Documents/uit/bachelor/verification{\_}sources/verification{\_}of{\_}the{\_}chord{\_}protocol.pdf:pdf},
keywords = {concurrency,tla+},
mendeley-tags = {concurrency,tla+},
title = {{Verification of the Chord protocol with TLA+}},
url = {https://munin.uit.no/bitstream/handle/10037/15613/thesis.pdf?sequence=2{\&}isAllowed=y},
year = {2019}
}
@article{Lamport2019,
author = {Lamport, Leslie},
file = {:home/aqissiaq/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lamport - 2019 - Safety , Liveness , and Fairness.pdf:pdf},
keywords = {concurrency,tla+},
mendeley-tags = {concurrency,tla+},
number = {May},
title = {{Safety , Liveness , and Fairness}},
year = {2019}
}
@inproceedings{Lamport_specifying_2002,
location = {New York, {NY}, {USA}},
title = {Specifying and Verifying Systems with {TLA}+},
url = {http://doi.acm.org/10.1145/1133373.1133382},
doi = {10.1145/1133373.1133382},
series = {{EW} 10},
pages = {45--48},
booktitle = {Proceedings of the 10th Workshop on {ACM} {SIGOPS} European Workshop},
publisher = {{ACM}},
author = {Lamport, Leslie and Matthews, John and Tuttle, Mark and Yu, Yuan},
date = {2002}
}
@article{Lamport1977,
address = {Piscataway, NJ, USA},
author = {Lamport, L},
doi = {10.1109/TSE.1977.229904},
issn = {0098-5589},
journal = {IEEE Trans. Softw. Eng.},
keywords = {Assertions,concufrent programming,concurrency,correctness,multiprocessing,safety policies,synchronization},
mendeley-tags = {concurrency,safety policies},
number = {2},
pages = {125--143},
publisher = {IEEE Press},
title = {{Proving the Correctness of Multiprocess Programs}},
url = {https://doi.org/10.1109/TSE.1977.229904},
volume = {3},
year = {1977}
}
@article{Lamport2019a,
author = {Lamport, Leslie},
file = {:home/aqissiaq/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lamport - 2019 - Hiding , Refinement , and Auxiliary Variables.pdf:pdf},
keywords = {concurrency,tla+},
mendeley-tags = {concurrency,tla+},
number = {July},
title = {{Hiding , Refinement , and Auxiliary Variables}},
year = {2019}
}
@article{Shalev2006,
address = {New York, NY, USA},
author = {Shalev, Ori and Shavit, Nir},
doi = {10.1145/1147954.1147958},
issn = {0004-5411},
journal = {J. ACM},
keywords = {Concurrent data structures,bachelor,compare-and-swap,concurrency,hash table,non-blocking synchronization},
mendeley-groups = {Bachelor},
mendeley-tags = {bachelor,concurrency},
number = {3},
pages = {379--405},
publisher = {Association for Computing Machinery},
title = {{Split-Ordered Lists: Lock-Free Extensible Hash Tables}},
url = {https://doi.org/10.1145/1147954.1147958},
volume = {53},
year = {2006}
}
@article{Amazon2015,
author = {Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
title = {How Amazon Web Services Uses Formal Methods},
year = {2015},
issue_date = {March 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {58},
number = {4},
issn = {0001-0782},
url = {https://doi.org/10.1145/2699417},
doi = {10.1145/2699417},
journal = {Commun. ACM},
month = mar,
pages = {66–73},
numpages = {8}
}
  
@misc{Lamport_video_2019,
author = {Lamport, Leslie},
title = {The TLA+ Video Course},
howpublished = {Online Video},
month = mar,
year = {2018}
}

@article{Beschastnikh2016,
author = {Beschastnikh, Ivan and Wang, Patty and Brun, Yuriy and Ernst, Michael D.},
title = {Debugging Distributed Systems},
year = {2016},
issue_date = {July 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {59},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/2909480},
doi = {10.1145/2909480},
journal = {Commun. ACM},
month = jul,
pages = {32–37},
numpages = {6}
}
  
@book{Tanenbaum2014,
author = {Tanenbaum, Andrew S. and Bos, Herbert},
title = {Modern Operating Systems},
year = {2014},
isbn = {013359162X},
publisher = {Prentice Hall Press},
address = {USA},
edition = {4th}
}
 
@article{Clarke2009,
author = {Clarke, Edmund M. and Emerson, E. Allen and Sifakis, Joseph},
title = {Model Checking: Algorithmic Verification and Debugging},
year = {2009},
issue_date = {November 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/1592761.1592781},
doi = {10.1145/1592761.1592781},
journal = {Commun. ACM},
month = nov,
pages = {74–84},
numpages = {11}
}
  
@inproceedings{Wolfsthal2005,
author = {Wolfsthal, Yaron and Gott, Rebecca M.},
title = {Formal Verification: Is It Real Enough?},
year = {2005},
isbn = {1595930582},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1065579.1065755},
doi = {10.1145/1065579.1065755},
booktitle = {Proceedings of the 42nd Annual Design Automation Conference},
pages = {670–671},
numpages = {2},
keywords = {functional verification, formal verification},
location = {Anaheim, California, USA},
series = {DAC ’05}
}
  
@inproceedings{Pnueli1977,
author = {Pnueli, Amir},
title = {The Temporal Logic of Programs},
year = {1977},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SFCS.1977.32},
doi = {10.1109/SFCS.1977.32},
booktitle = {Proceedings of the 18th Annual Symposium on Foundations of Computer Science},
pages = {46–57},
numpages = {12},
series = {SFCS ’77}
}
  
@misc{lock-free-structures2013,
    title={Lock-free Concurrent Data Structures},
    author={Daniel Cederman and Anders Gidenstam and Phuong Ha and Håkan Sundell and Marina Papatriantafilou and Philippas Tsigas},
    year={2013},
    eprint={1302.2757},
    archivePrefix={arXiv},
    primaryClass={cs.DC}
}

@InProceedings{Duarte-Haskell2016,
author="Duarte, Rodrigo Medeiros
and Du Bois, Andr{\'e} Rauber
and Pilla, Mauricio L.
and Cavalheiro, Gerson G. H.
and Reiser, Renata H. S.",
editor="Castor, Fernando
and Liu, Yu David",
title="Concurrent Hash Tables for Haskell",
booktitle="Programming Languages",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="110--124",
abstract="This paper presents seven hash table Haskell implementations, ranging from low-level synchronization mechanisms to high-level ones such as transactional memories. The result of the comparison between the algorithms showed that the implementation using the STM Haskell transactional memory library and fine-grain synchronization presented the best performance and good scalability.",
isbn="978-3-319-45279-1"
}

@article{Hoare1969,
author = {Hoare, C. A. R.},
title = {An Axiomatic Basis for Computer Programming},
year = {1969},
issue_date = {October 1969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {10},
issn = {0001-0782},
url = {https://doi.org/10.1145/363235.363259},
doi = {10.1145/363235.363259},
journal = {Commun. ACM},
month = oct,
pages = {576–580},
numpages = {5},
keywords = {theory of programming’ proofs of programs, axiomatic method, programming language design, program documentation, formal language definition, machine-independent programming}
}
  
@article{Floyd1967,
  added-at = {2009-01-27T21:07:57.000+0100},
  author = {Floyd, Robert W.},
  biburl = {https://www.bibsonomy.org/bibtex/22fa3c50b3386ec2f640eb8bfaedaa7db/tmcphillips},
  description = {A formal grammar for flowcharts.},
  interhash = {bd9dee412b9a403b9fa1f1b2f0032f36},
  intrahash = {2fa3c50b3386ec2f640eb8bfaedaa7db},
  journal = {Proceedings of Symposium on Applied Mathematics},
  keywords = {FormalLanguages},
  pages = {19-32},
  timestamp = {2009-01-27T22:39:35.000+0100},
  title = {Assigning Meanings to Programs},
  url = {http://laser.cs.umass.edu/courses/cs521-621.Spr06/papers/Floyd.pdf},
  volume = 19,
  year = 1967
}

@misc{TLAplus,
  author = {Microsoft},
  title = {TLA+ Toolbox},
  year = {2003},
  publisher = {Microsoft},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/tlaplus/tlaplus}}
}

@InProceedings{Lamport-Batson2002,
author="Batson, Brannon
and Lamport, Leslie",
editor="de Boer, Frank S.
and Bonsangue, Marcello M.
and Graf, Susanne
and de Roever, Willem-Paul",
title="High-Level Specifications: Lessons from Industry",
booktitle="Formal Methods for Components and Objects",
year="2003",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="242--261",
abstract="We explain the rationale behind the design of the TLA{\thinspace}+{\thinspace} specification language, and we describe our experience using it and the TLC model checker in industrial applications--including the verification of multiprocessor memory designs at Intel. Based on this experience, we challenge some conventional wisdom about high-level specifications.",
isbn="978-3-540-39656-7"
}

@article{Zave2012,
author = {Zave, Pamela},
title = {Using Lightweight Modeling to Understand Chord},
year = {2012},
issue_date = {April 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {2},
issn = {0146-4833},
url = {https://doi.org/10.1145/2185376.2185383},
doi = {10.1145/2185376.2185383},
journal = {SIGCOMM Comput. Commun. Rev.},
month = mar,
pages = {49–57},
numpages = {9},
keywords = {distributed hash table (DHT), alloy, spin}
}
  
