Notes on "Specifying and verifying systems with TLA+" Lamport et al. 2002

Introduction:
correct code is important component of reliability.
two goals:
    formal descriptions and proving their correctness
    checking that a program implements the description

TLA+
    TLA+ is based on untyped ZF ste theory, first order logic and TLA.
    typically "Init /\ []Next /\ Liveness"

TLC
    on-the-fly model ("during symbolic reachability" [https://link.springer.com/chapter/10.1007/BFb0028744]) checker
    Safety properties: checks for deadlocks and violations of invariants
    Liveness: tableau method described in "The Temporal Logic of Reactive and Concurrent Systems"
    TLC scales well with multithreading
    makes frequent checkpoints
    allows for symmetries in specifications

Hierarchical proofs
    to prove that S1 implements S2:
        express variables of S2 as functions of variables of S1
        prove S1 => S2*, where S2* is S2 with its variables replaced by these functions

Three examples
Wildfire
    pre-TLC, still found two errors
EV7
    used the TLA+ specification to find valid execution traces that could then be tested
    found about 70 errors, most in the translation from informal specs
    engineers at Intel continue to use TLA+
Itanium
    Too large to be feasibly tested, but proved engineers' ability to use TLA+